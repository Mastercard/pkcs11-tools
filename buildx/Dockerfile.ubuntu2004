# Dockerfile for building pkcs11-tools for Ubuntu 22.04
#
# Copyright (c) 2025 Mastercard

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG REPO_URL="https://github.com/Mastercard/pkcs11-tools"
ARG REPO_COMMIT_OR_TAG="HEAD"
ARG DISTRO_NAME="ubuntu"
ARG DISTRO_VERSION="20.04"
ARG DISTRO_SHORT_NAME="ubuntu2004"
ARG PROXY_ROOT_CA="DUMMY.pem"
ARG CONFIG_ARGS=""

# base0 is just the base image with the proxy root CA installed
# note that if there is no proxy cert, a dummy value is used
FROM ${DISTRO_NAME}:${DISTRO_VERSION} AS base0
ARG PROXY_ROOT_CA
COPY ${PROXY_ROOT_CA} /usr/local/share/ca-certificates/${PROXY_ROOT_CA}
RUN apt-get update && apt-get install -y ca-certificates

FROM base0 AS base
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install required packages for building the project
RUN apt-get update && apt-get install -y \
    build-essential \
    autoconf \
    autoconf-archive \
    automake \
    libtool \
    pkg-config \
    make \
    perl \
    libssl-dev \
    gawk \
    git \
    tar \
    gzip \
    dpkg-dev \
    pandoc \
    && rm -rf /var/lib/apt/lists/*

FROM base AS gitcloned
ARG REPO_URL
ARG REPO_COMMIT_OR_TAG="HEAD"

# The meta directory is used to store the version and maintainer information
# for the DEB package
RUN mkdir -p /meta

# Clone the repository
WORKDIR /src
RUN git clone $REPO_URL .
RUN git checkout $REPO_COMMIT_OR_TAG

# Copy the include files for the nCipher and Luna HSMs if they are present
RUN mkdir -p include/cryptoki
COPY ./include/cryptoki/ncipher.* ./include/cryptoki/luna.* include/cryptoki/

# Retrieve information for building DEB package later

# Retrieve the architecture
RUN PKG_ARCH=$(dpkg --print-architecture) \
    && echo "PKG_ARCH=\"$PKG_ARCH\"" >> /meta/env

# Retrieve version information from git
# If the version is a tag, set PKG_GITSUFFIX to the tag, or to '~<commit>' if the tag is not the last commit
RUN PKG_VERSION=$(git describe --tags | sed -E 's/^v([^\-]+)(-.*)?$/\1/' ) \
    PKG_RELEASE=$(git describe --tags | sed -E 's/^v([^\-]+)(-.*)?$/\2/; s/^-//; s/^$/0/; s/-(.*)//' ) \
    PKG_GITCOMMIT=$(git rev-parse --short HEAD) \
    PKG_GITSUFFIX=$(git describe --tags | sed -E 's/^v([^\-]+)(-.*)?$/\2/;s/-([0-9]*)-g(.*)/~\2/') \
    && echo "PKG_GITSUFFIX=\"$PKG_GITSUFFIX\"" >> /meta/env \
    && echo "PKG_VERSION=\"$PKG_VERSION\"" >> /meta/env \
    && echo "PKG_RELEASE=\"$PKG_RELEASE\"" >> /meta/env \
    && echo "PKG_GITCOMMIT=\"$PKG_GITCOMMIT\"" >> /meta/env

# Retrieve the maintainer from git
RUN PKG_MAINTAINER=$(git log -1 --pretty=format:'%an <%ae>') \
    && echo "PKG_MAINTAINER=\"$PKG_MAINTAINER\"" >> /meta/env

# Retrieve description from README.md
# This is a bit more complex as we need to strip out the first heading
# and the first line of the second heading
# moreover, any occurrence of '`' should be removed to avoid issues with
# the shell
RUN PKG_DESCRIPTION=$(cat README.md \
    | awk '/# PKCS\\#11 tools/{flag=1} /Some features:/{flag=0} flag' \
    | sed '/^##.*/d' \
    | pandoc -f markdown -t plain \
    | sed '/^[[:space:]]*$/d' \
    | sed '1!s/^/ /')\
    && echo "PKG_DESCRIPTION=\"$PKG_DESCRIPTION\"" >> /meta/env


RUN echo "export PKG_GITSUFFIX PKG_VERSION PKG_RELEASE PKG_GITCOMMIT PKG_MAINTAINER PKG_ARCH" >> /meta/env


FROM gitcloned AS builder
ARG CONFIG_ARGS

# Build the project for tar package (/usr/local)
RUN ./bootstrap.sh --shallow-clone \
    && ./configure $CONFIG_ARGS \
    && make -j $(nproc)\
    && make install-strip DESTDIR=/tar_build

# Install documentation
RUN mkdir -p /tar_build/usr/local/share/doc/pkcs11-tools \
    && install -m 644 -t /tar_build/usr/local/share/doc/pkcs11-tools \
    README.md CHANGELOG.md COPYING \
    docs/INSTALL.md \
    docs/MANUAL.md \
    docs/TPLICENSES.md \
    docs/CONTRIBUTING.md

# Build again the project for deb package (/usr)
RUN make distclean \
    && ./configure --prefix=/usr --libdir=/usr/lib/$(dpkg-architecture -qDEB_HOST_MULTIARCH) $CONFIG_ARGS \
    && make -j $(nproc) \
    && make install-strip DESTDIR=/deb_build

# Install documentation
RUN mkdir -p /deb_build/usr/share/doc/pkcs11-tools \
    && install -m 644 -t /deb_build/usr/share/doc/pkcs11-tools \
    README.md CHANGELOG.md COPYING \
    docs/INSTALL.md \
    docs/MANUAL.md \
    docs/TPLICENSES.md \
    docs/CONTRIBUTING.md


# Final stage
FROM builder AS final
ARG DISTRO_SHORT_NAME

RUN mkdir -p /artifacts

# build the .tar.gz file
WORKDIR /tar_build
RUN . /meta/env && tar -czf /artifacts/pkcs11-tools-${DISTRO_SHORT_NAME}-${PKG_ARCH}-${PKG_VERSION}${PKG_GITSUFFIX}.tar.gz usr

# build the deb package
WORKDIR /deb_build
RUN mkdir -p DEBIAN /artifacts

# Create control file for the package
RUN . /meta/env \
    && echo "Package: pkcs11-tools" > DEBIAN/control \
    && echo "Version: $PKG_VERSION$PKG_GITSUFFIX" >> DEBIAN/control \
    && echo "License: Apache 2.0" >> DEBIAN/control \
    && echo "Homepage: $REPO_URL" >> DEBIAN/control \
    && echo "X-Vcs-Git: $REPO_URL" >> DEBIAN/control \
    && echo "X-Git-Commit: $PKG_GITCOMMIT" >> DEBIAN/control \
    && echo "Section: utils" >> DEBIAN/control \
    && echo "Priority: optional" >> DEBIAN/control \
    && echo "Architecture: $PKG_ARCH" >> DEBIAN/control \
    && echo "Depends: libc6, libssl1.1" >> DEBIAN/control \
    && echo "Maintainer: $PKG_MAINTAINER" >> DEBIAN/control \
    && echo "Description: a set of tools for manipulation of PKCS#11 objects" >> DEBIAN/control

# Build the .deb package
RUN . /meta/env \
    && dpkg-deb --build /deb_build /artifacts/pkcs11-tools-${DISTRO_SHORT_NAME}-${PKG_ARCH}-${PKG_VERSION}${PKG_GITSUFFIX}.deb

# Final command to list the artifacts
CMD [ "find", "/artifacts", "-type", "f" ]

